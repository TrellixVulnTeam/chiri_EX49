declare type Status = "UPGRADE" | "CREATE" | "UPLOAD" | "NOOP";
interface ICheckRemoteStatus {
    status: Status;
    remotePackageInfo?: IPackageInfo;
}
declare type ICheckRemotePackage = (packageName: string, version: string) => Promise<ICheckRemoteStatus>;
export interface IPackageInfo {
    name: string;
    modified: string;
    description: string;
    repository: {
        url: string;
    };
    "dist-tags": {
        latest: string;
    };
    versions: {
        [version: string]: {
            name: string;
            version: string;
            dist: {
                tarball: string;
                shasum: string;
            };
            dependencies: {
                [dependency: string]: string;
            };
            devDependencies: {
                [devDependency: string]: string;
            };
        };
    };
}
declare type ICreatePackageInfo = (name: string, version: string, filename: string, shasum: string) => IPackageInfo;
declare type IUpgradePackageInfo = (name: string, version: string, filename: string, shasum: string, remotePackageInfo: IPackageInfo) => IPackageInfo;
declare type IUploadPackageInfo = IUpgradePackageInfo;
export declare const getStatus: (currentVersion: string, remoteVersion?: string | undefined) => Status;
export declare const checkRemotePackage: ICheckRemotePackage;
export declare const getRemotePackageInfo: (packageName: string) => Promise<IPackageInfo | null>;
export declare const createPackageInfo: ICreatePackageInfo;
export declare const upgradePackageInfo: IUpgradePackageInfo;
export declare const uploadPackageInfo: IUploadPackageInfo;
export {};
