"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadPackageInfo = exports.upgradePackageInfo = exports.createPackageInfo = exports.getRemotePackageInfo = exports.checkRemotePackage = exports.getStatus = void 0;
const semver_1 = __importDefault(require("semver"));
const path_1 = __importDefault(require("path"));
const log_1 = require("./log");
const aws_sdk_1 = require("aws-sdk");
exports.getStatus = (currentVersion, remoteVersion) => {
    if (remoteVersion == null)
        return "CREATE";
    if (currentVersion.includes("-") && !semver_1.default.eq(currentVersion, remoteVersion)) {
        return "UPLOAD";
    }
    if (semver_1.default.gt(currentVersion, remoteVersion)) {
        return "UPGRADE";
    }
    if (semver_1.default.eq(currentVersion, remoteVersion)) {
        return "NOOP";
    }
    if (semver_1.default.lt(currentVersion, remoteVersion)) {
        return "UPLOAD";
    }
    return "NOOP";
};
exports.checkRemotePackage = (packageName, currentVersion) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const remotePackageInfo = yield exports.getRemotePackageInfo(packageName);
        if (!remotePackageInfo) {
            return {
                status: "CREATE",
            };
        }
        const status = exports.getStatus(currentVersion, remotePackageInfo["dist-tags"].latest);
        switch (status) {
            case "UPGRADE": {
                return {
                    status,
                    remotePackageInfo,
                };
            }
            case "UPLOAD": {
                return {
                    status,
                    remotePackageInfo,
                };
            }
            case "NOOP": {
                log_1.logError(`ðŸš«  Remote version of "${packageName}" is the same than the one you are trying to publish (${currentVersion})`);
                process.exit(1);
            }
            default: {
                process.exit(1);
            }
        }
    }
    catch (error) {
        log_1.logError(`ðŸš«  There was an error trying to get the package info for "${packageName}"`);
        log_1.logError(error);
        process.exit(1);
    }
});
exports.getRemotePackageInfo = (packageName) => {
    const BUCKET_NAME = "cornershop-npm";
    const s3bucket = new aws_sdk_1.S3();
    return new Promise((resolve, reject) => {
        s3bucket.getObject({ Bucket: BUCKET_NAME, Key: `${packageName}/index.html` }, (err, data) => {
            var _a;
            if (err && err.name === "NoSuchKey") {
                resolve(null);
                return;
            }
            else if (err) {
                reject(err);
                return;
            }
            if (!data) {
                resolve(null);
                return;
            }
            resolve(JSON.parse((_a = data.Body) === null || _a === void 0 ? void 0 : _a.toString()));
        });
    });
};
exports.createPackageInfo = (name, version, filename, shasum) => {
    const { dependencies, devDependencies, description, repository } = require(path_1.default.resolve(process.cwd(), "package.json"));
    return {
        name,
        description,
        repository,
        modified: new Date().toISOString(),
        "dist-tags": {
            latest: version,
        },
        versions: {
            [version]: {
                name,
                version,
                dist: {
                    tarball: `${name}/${filename}`,
                    shasum,
                },
                dependencies,
                devDependencies,
            },
        },
    };
};
exports.upgradePackageInfo = (name, version, filename, shasum, remotePackageInfo) => {
    const { dependencies, devDependencies, description, repository } = require(path_1.default.resolve(process.cwd(), "package.json"));
    return Object.assign(Object.assign({}, remotePackageInfo), { description,
        repository, modified: new Date().toISOString(), "dist-tags": {
            latest: version,
        }, versions: Object.assign(Object.assign({}, remotePackageInfo.versions), { [version]: {
                name,
                version,
                dist: {
                    tarball: `${name}/${filename}`,
                    shasum,
                },
                dependencies,
                devDependencies,
            } }) });
};
exports.uploadPackageInfo = (name, version, filename, shasum, remotePackageInfo) => {
    const { dependencies, devDependencies, description, repository } = require(path_1.default.resolve(process.cwd(), "package.json"));
    return Object.assign(Object.assign({}, remotePackageInfo), { modified: new Date().toISOString(), description,
        repository, versions: Object.assign(Object.assign({}, remotePackageInfo.versions), { [version]: {
                name,
                version,
                dist: {
                    tarball: `${name}/${filename}`,
                    shasum,
                },
                dependencies,
                devDependencies,
            } }) });
};
//# sourceMappingURL=checkRemotePackage.js.map