"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadIndexPackage = exports.uploadPackageToS3 = void 0;
const fs_1 = __importDefault(require("fs"));
const aws_sdk_1 = require("aws-sdk");
const BUCKET_NAME = 'cornershop-npm';
function uploadPackageToS3(name, filename) {
    const s3bucket = new aws_sdk_1.S3();
    const readStream = fs_1.default.createReadStream(filename);
    const params = {
        Bucket: BUCKET_NAME,
        Key: `${name}/${filename}`,
        Body: readStream,
        ContentType: 'application/gzip'
    };
    return new Promise((resolve, reject) => {
        s3bucket.upload(params, function (err, data) {
            readStream.destroy();
            if (err) {
                return reject(err);
            }
            return resolve(data);
        });
    });
}
exports.uploadPackageToS3 = uploadPackageToS3;
function uploadIndexPackage(name, packageInfo) {
    const filename = 'index.html';
    fs_1.default.writeFileSync(filename, JSON.stringify(packageInfo));
    const readStream = fs_1.default.createReadStream(filename);
    const s3bucket = new aws_sdk_1.S3();
    const params = {
        Bucket: BUCKET_NAME,
        Key: `${name}/${filename}`,
        Body: readStream,
        ContentType: 'text/html'
    };
    return new Promise((resolve, reject) => {
        s3bucket.upload(params, function (err, data) {
            readStream.destroy();
            if (err) {
                return reject(err);
            }
            return resolve(data);
        });
    });
}
exports.uploadIndexPackage = uploadIndexPackage;
//# sourceMappingURL=uploadToS3.js.map