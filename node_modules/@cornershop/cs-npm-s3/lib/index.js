"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.info = exports.publish = void 0;
const packModule_1 = require("./helpers/packModule");
const getPackageJSON_1 = require("./helpers/getPackageJSON");
const checkRemotePackage_1 = require("./helpers/checkRemotePackage");
const uploadToS3_1 = require("./helpers/uploadToS3");
const cleanUp_1 = require("./helpers/cleanUp");
const log_1 = require("./helpers/log");
exports.publish = () => __awaiter(void 0, void 0, void 0, function* () {
    log_1.logInfo("🚀  Cornershop npm S3");
    const { name, version } = getPackageJSON_1.getPackageJSON();
    log_1.logInfo("☁️  Checking remote version");
    const { status, remotePackageInfo } = yield checkRemotePackage_1.checkRemotePackage(name, version);
    log_1.logInfo("📦  Preparing package");
    const { filename, shasum } = yield packModule_1.packModule(process.cwd());
    let newPackageInfo;
    if (status === "CREATE") {
        log_1.logInfo("✅  Creating new package");
        newPackageInfo = checkRemotePackage_1.createPackageInfo(name, version, filename, shasum);
    }
    else if (status === "UPGRADE") {
        log_1.logInfo("✅  Upgrading existing package");
        newPackageInfo = checkRemotePackage_1.upgradePackageInfo(name, version, filename, shasum, remotePackageInfo);
    }
    else if (status === "UPLOAD") {
        log_1.logInfo(`✅  This version (${version}) will be uploaded but it won't replace the default (${remotePackageInfo["dist-tags"].latest})`);
        newPackageInfo = checkRemotePackage_1.uploadPackageInfo(name, version, filename, shasum, remotePackageInfo);
    }
    if (!newPackageInfo) {
        log_1.logError("🚫 There was a problem generating package info");
        process.exit(1);
    }
    try {
        log_1.logInfo("⬆️  Upload package info to S3");
        yield uploadToS3_1.uploadIndexPackage(name, newPackageInfo);
        log_1.logInfo("⬆️  Upload package files to S3");
        yield uploadToS3_1.uploadPackageToS3(name, filename);
    }
    catch (error) {
        log_1.logError("🚫 There was an error trying to upload the package to S3");
        log_1.logError(error);
        cleanUp_1.removeTarballFile(filename);
        cleanUp_1.removeIndexFile();
        process.exit(1);
    }
    log_1.logInfo("🗑 Remove temp files");
    cleanUp_1.removeTarballFile(filename);
    cleanUp_1.removeIndexFile();
    log_1.logInfo("✅ Package published successfully");
});
exports.info = (packageName) => __awaiter(void 0, void 0, void 0, function* () {
    if (packageName == null || packageName === "") {
        log_1.logError(`🚫 the name of the package is required.`);
        process.exit(1);
    }
    if (!packageName.includes("@cornershop/")) {
        log_1.logError(`🚫 package name should start with @cornershop/`);
        process.exit(1);
    }
    const packageInfo = yield checkRemotePackage_1.getRemotePackageInfo(packageName);
    if (!packageInfo) {
        log_1.logError(`🚫 ${packageName} doesn't exist.`);
        process.exit(1);
    }
    log_1.logInfo(JSON.stringify(packageInfo, null, 2));
});
//# sourceMappingURL=index.js.map