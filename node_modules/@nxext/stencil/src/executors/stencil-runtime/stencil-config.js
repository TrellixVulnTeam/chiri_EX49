"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeStencilConfig = void 0;
const tslib_1 = require("tslib");
const node_1 = require("@stencil/core/sys/node");
const compiler_1 = require("@stencil/core/compiler");
const path_1 = require("path");
const normalize_path_1 = require("../../utils/normalize-path");
function getCompilerExecutingPath() {
    return require.resolve('@stencil/core/compiler');
}
function initializeStencilConfig(taskCommand, options, context, createStencilCompilerOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const flags = createStencilCompilerOptions(taskCommand, options);
        const logger = node_1.createNodeLogger({ process });
        const sys = node_1.createNodeSys({ process });
        if (sys.getCompilerExecutingPath == null) {
            sys.getCompilerExecutingPath = getCompilerExecutingPath;
        }
        if (flags.ci) {
            logger.enableColors(false);
        }
        const projectDir = context.workspace.projects[context.projectName].root;
        const projectRoot = normalize_path_1.normalizePath(path_1.join(context.root, projectDir));
        const distDir = normalize_path_1.normalizePath(path_1.join(context.root, options.outputPath));
        const configPath = normalize_path_1.normalizePath(path_1.join(context.root, options.configPath));
        let config = {
            flags
        };
        if (options.tsConfig) {
            const tsconfig = path_1.join(context.root, options.tsConfig);
            config = Object.assign(Object.assign({}, config), { tsconfig: tsconfig });
        }
        const loadConfigResults = yield compiler_1.loadConfig({
            config,
            configPath,
            logger,
            sys
        });
        const loadedConfig = loadConfigResults.config;
        if (loadedConfig.flags.task === 'build') {
            loadedConfig.rootDir = distDir;
            loadedConfig.packageJsonFilePath = normalize_path_1.normalizePath(path_1.join(distDir, 'package.json'));
        }
        return {
            pathCollection: {
                projectName: context.projectName,
                projectRoot: projectRoot,
                distDir: distDir,
                pkgJson: path_1.join(projectRoot, 'package.json')
            },
            config: loadedConfig
        };
    });
}
exports.initializeStencilConfig = initializeStencilConfig;
//# sourceMappingURL=stencil-config.js.map