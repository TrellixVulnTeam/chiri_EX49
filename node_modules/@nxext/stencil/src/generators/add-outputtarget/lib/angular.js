"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAngularOutputtarget = exports.prepareAngularLibrary = void 0;
const tslib_1 = require("tslib");
const versions_1 = require("../../../utils/versions");
const ast_utils_1 = require("../../../utils/ast-utils");
const utils_1 = require("../../../utils/utils");
const fileutils_1 = require("../../../utils/fileutils");
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
const generators_1 = require("@nrwl/angular/generators");
const ast_utils_2 = require("@nrwl/workspace/src/utilities/ast-utils");
const stencil_core_utils_1 = require("../../../stencil-core-utils");
function prepareAngularLibrary(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const angularProjectName = `${options.projectName}-angular`;
        const { libsDir, npmScope } = devkit_1.getWorkspaceLayout(host);
        const libraryTarget = yield generators_1.libraryGenerator(host, {
            name: angularProjectName,
            skipFormat: true,
            publishable: options.publishable
        });
        devkit_1.addDependenciesToPackageJson(host, {}, {
            '@stencil/angular-output-target': versions_1.STENCIL_OUTPUTTARGET_VERSION['angular']
        });
        const angularModuleFilename = devkit_1.names(angularProjectName).fileName;
        const angularModulePath = `${libsDir}/${angularProjectName}/src/lib/${angularModuleFilename}.module.ts`;
        const angularModuleSource = ast_utils_1.readTsSourceFile(host, angularModulePath);
        const packageName = `@${npmScope}/${options.projectName}`;
        const changes = devkit_1.applyChangesToString(angularModuleSource.text, [
            ...ast_utils_1.addImport(angularModuleSource, `import { defineCustomElements } from '${packageName}/loader';`),
        ]);
        host.write(angularModulePath, changes);
        ast_utils_2.addGlobal(host, angularModuleSource, angularModulePath, 'defineCustomElements(window);');
        utils_1.addToGitignore(`${libsDir}/${angularProjectName}/**/generated`);
        return libraryTarget;
    });
}
exports.prepareAngularLibrary = prepareAngularLibrary;
function addAngularOutputtarget(host, projectName, stencilProjectConfig, stencilConfigPath, stencilConfigSource, packageName) {
    const angularProjectConfig = devkit_1.readProjectConfiguration(host, `${projectName}-angular`);
    const realtivePath = path_1.relative(fileutils_1.getDistDir(stencilProjectConfig.root), angularProjectConfig.root);
    const proxyPath = devkit_1.joinPathFragments(realtivePath, 'src/generated/directives/proxies.ts');
    const changes = devkit_1.applyChangesToString(stencilConfigSource.text, [
        ...ast_utils_1.addImport(stencilConfigSource, `import { angularOutputTarget, ValueAccessorConfig } from '@stencil/angular-output-target';`),
        ...stencil_core_utils_1.addToOutputTargets(stencilConfigSource, `
      angularOutputTarget({
          componentCorePackage: '${packageName}',
          directivesProxyFile: '${proxyPath}',
          valueAccessorConfigs: angularValueAccessorBindings
        }),
      `)
    ]);
    host.write(stencilConfigPath, changes);
    ast_utils_2.addGlobal(host, stencilConfigSource, stencilConfigPath, 'const angularValueAccessorBindings: ValueAccessorConfig[] = [];');
}
exports.addAngularOutputtarget = addAngularOutputtarget;
//# sourceMappingURL=angular.js.map