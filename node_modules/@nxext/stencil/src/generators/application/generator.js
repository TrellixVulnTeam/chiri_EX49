"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationSchematic = exports.applicationGenerator = void 0;
const tslib_1 = require("tslib");
const typings_1 = require("./../../utils/typings");
const devkit_1 = require("@nrwl/devkit");
const utils_1 = require("../../utils/utils");
const init_1 = require("../init/init");
const path_1 = require("path");
const stencil_core_utils_1 = require("../../stencil-core-utils");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
const add_project_1 = require("./lib/add-project");
function normalizeOptions(host, options) {
    const { appsDir } = devkit_1.getWorkspaceLayout(host);
    const projectName = devkit_1.names(options.name).fileName;
    const projectDirectory = options.directory
        ? `${devkit_1.names(options.directory).fileName}/${projectName}`
        : projectName;
    const projectRoot = `${appsDir}/${projectDirectory}`;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const style = utils_1.calculateStyle(options.style);
    const appType = typings_1.AppType.application;
    return Object.assign(Object.assign({}, options), { projectName,
        projectRoot,
        projectDirectory,
        parsedTags,
        style,
        appType });
}
function createFiles(host, options) {
    devkit_1.generateFiles(host, path_1.join(__dirname, './files/app'), options.projectRoot, Object.assign(Object.assign(Object.assign({}, options), devkit_1.names(options.name)), { offsetFromRoot: devkit_1.offsetFromRoot(options.projectRoot) }));
    if (options.unitTestRunner === 'none') {
        host.delete(`${options.projectRoot}/src/components/app-home/app-home.spec.ts`);
        host.delete(`${options.projectRoot}/src/components/app-root/app-root.spec.ts`);
        host.delete(`${options.projectRoot}/src/components/app-profile/app-profile.spec.ts`);
    }
}
function applicationGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = normalizeOptions(host, schema);
        const initTask = yield init_1.initGenerator(host, options);
        createFiles(host, options);
        add_project_1.addProject(host, options);
        stencil_core_utils_1.addStylePluginToConfig(host, path_1.join(options.projectRoot, 'stencil.config.ts'), options.style);
        if (!options.skipFormat) {
            yield devkit_1.formatFiles(host);
        }
        return run_tasks_in_serial_1.runTasksInSerial(initTask);
    });
}
exports.applicationGenerator = applicationGenerator;
exports.default = applicationGenerator;
exports.applicationSchematic = devkit_1.convertNxGenerator(applicationGenerator);
//# sourceMappingURL=generator.js.map