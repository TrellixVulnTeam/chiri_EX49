"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLibBuildableSchematic = exports.makeLibBuildableGenerator = void 0;
const tslib_1 = require("tslib");
const workspace_1 = require("@nrwl/workspace");
const devkit_1 = require("@nrwl/devkit");
const stencil_core_utils_1 = require("../../stencil-core-utils");
const stencil_core_utils_2 = require("../../stencil-core-utils");
const update_tsconfig_1 = require("./lib/update-tsconfig");
const path_1 = require("path");
const targets_1 = require("../../utils/targets");
const projectType = workspace_1.ProjectType.Library;
function normalize(options, projectRoot) {
    return Object.assign(Object.assign({}, options), { projectRoot });
}
function createFiles(host, options) {
    devkit_1.generateFiles(host, path_1.join(__dirname, './files/lib'), options.projectRoot, options);
}
function updateProjectConfig(host, options) {
    const projectConfig = devkit_1.readProjectConfiguration(host, options.name);
    projectConfig.targets = projectConfig.targets || {};
    projectConfig.targets.build = targets_1.getBuildTarget(projectType, options);
    projectConfig.targets.serve = targets_1.getServeTarget(projectType, options);
    projectConfig.targets.e2e = targets_1.getE2eTarget(projectType, options);
    devkit_1.updateProjectConfiguration(host, options.name, projectConfig);
}
function makeLibBuildableGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const stencilProjectConfig = devkit_1.readProjectConfiguration(host, schema.name);
        const options = normalize(schema, stencilProjectConfig.root);
        updateProjectConfig(host, options);
        createFiles(host, options);
        stencil_core_utils_1.addStylePluginToConfig(host, devkit_1.joinPathFragments(options.projectRoot, 'stencil.config.ts'), options.style);
        stencil_core_utils_2.addToOutputTargetsInTree(host, [
            `{
            type: 'dist',
            esmLoaderPath: '../loader',
            dir: '${devkit_1.offsetFromRoot(options.projectRoot)}dist/${options.projectRoot}/dist',
          }`
        ], devkit_1.joinPathFragments(options.projectRoot, 'stencil.config.ts'));
        update_tsconfig_1.updateTsConfig(host, options);
        yield devkit_1.formatFiles(host);
    });
}
exports.makeLibBuildableGenerator = makeLibBuildableGenerator;
exports.default = makeLibBuildableGenerator;
exports.makeLibBuildableSchematic = devkit_1.convertNxGenerator(makeLibBuildableGenerator);
//# sourceMappingURL=make-lib-buildable.js.map